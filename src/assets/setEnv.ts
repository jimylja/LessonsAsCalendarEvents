/* tslint:disable */
// @ts-nocheck
const { writeFile, existsSync, mkdirSync } = require('fs');
const { argv } = require('yargs');
require('dotenv').config();

const environment = argv.environment;

function writeFileUsingFS(targetPath, environmentFileContent) {
	writeFile(targetPath, environmentFileContent, function (err) {
		if (err) {
			console.log(err);
		}
		if (environmentFileContent !== '') {
			console.log(`wrote variables to ${targetPath}`);
		}
	});
}


// Providing path to the `environments` directory
const envDirectory = './src/environments';

// creates the `environments` directory if it does not exist
if (!existsSync(envDirectory)) {
	mkdirSync(envDirectory);
}


// Checks whether command line argument of `prod` was provided signifying production mode
const isProduction = environment === 'prod';
const gapiRedirectionPath = isProduction ? 'https://lessonstocalendar.firebaseapp.com' : 'http://localhost:4200';

// choose the correct targetPath based on the environment chosen
const targetPath = isProduction
	? './src/environments/environment.prod.ts'
	: './src/environments/environment.dev.ts';

//creates the `environment.prod.ts` and `environment.ts` file if it does not exist
writeFileUsingFS(targetPath, '');

//actual content to be compiled dynamically and pasted into respective environment files
const environmentFileContent = `
  // This file was autogenerated by dynamically running setEnv.ts and using dotenv for managing API key secrecy

export const environment = {
  production: ${isProduction},
  firebase: {
    apiKey: '${process.env.FIREBASE_API_KEY}',
    authDomain: 'lessonstocalendar.firebaseapp.com',
    databaseURL: 'https://lessonstocalendar.firebaseio.com',
    projectId: 'lessonstocalendar',
    storageBucket: 'lessonstocalendar.appspot.com',
    messagingSenderId: '${process.env.FIREBASE_APP_SENDER_ID}',
    appId: '${process.env.FIREBASE_APP_ID}',
    measurementId: 'G-L8MQ84S23P'
  },
  gApiClient: {
    clientSecret: '${process.env.GAPI_CLIENT_SECRET}',
    clientId: '${process.env.GAPI_CLIENT_ID}',
    discoveryDocs: [
      'https://sheets.googleapis.com/$discovery/rest?version=v4',
      'https://content.googleapis.com/$ discovery/v1/apis/drive/v3/rest'
    ],
    ux_mode: 'popup',
    redirect_uri: '${gapiRedirectionPath}',
    scope: [
      'https://spreadsheets.google.com/feeds/spreadsheets/private/full',
      'https://www.googleapis.com/auth/spreadsheets.readonly',
      'https://www.googleapis.com/auth/drive',
      'https://www.googleapis.com/auth/drive.appdata',
      'https://www.googleapis.com/auth/drive.file',
      'https://www.googleapis.com/auth/drive.metadata',
      'https://www.googleapis.com/auth/drive.metadata.readonly',
      'https://www.googleapis.com/auth/drive.photos.readonly',
      'https://www.googleapis.com/auth/drive.readonly',
      'https://www.googleapis.com/auth/calendar',
      'https://www.googleapis.com/auth/calendar.events'
    ].join(' ')
  },
  apiKey: '${process.env.GAPI_API_KEY}',
  apiEndpoints: {
    token: 'https://oauth2.googleapis.com/token',
    user: 'https://www.googleapis.com/oauth2/v3/userinfo',
    calendar: 'https://www.googleapis.com/calendar/v3',
    spreadsheet: 'https://sheets.googleapis.com/v4/spreadsheets',
    drive: 'https://www.googleapis.com/drive/v3'
  },
  settings: {
    lessonsStartSchedule: ['08:00', '08:55', '10:00', '11:05', '12:00', '12:55', '13:45'],
    lessonDuration: 45
  }
};
`;

writeFileUsingFS(targetPath, environmentFileContent); // appending data into the target file

/* tslint:enable */
